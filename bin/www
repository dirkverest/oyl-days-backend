require("dotenv").config();
// Module dependencies.
const app = require("../app");
const mysqlConnection = require("../data/dbConnectors");
// JavaScript debugging utility
const debug = require("debug")("oyl-days-backend:server");
const http = require("http");
const _ = require("lodash");
// Dummy data
const casual = require("casual");
// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || "4000");

app.set("port", port);

// Create HTTP server.
const server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// SQL Check mysql connection
mysqlConnection.connect(function (err) {
  if (err) {
    console.error("error connecting: " + err.stack);
    return;
  }
  console.log("mysqlConnection id " + mysqlConnection.threadId);
});

// SQL Query Function
function sqlQuery(query) {
  mysqlConnection.query(
    {
      sql: query,
      timeout: 4000,
    },
    (err) => {
      if (err) {
        console.error("Error creating tables: " + err.stack);
        return;
      }
    }
  );
}

// SQL Table: User
sqlQuery(
  `
  CREATE TABLE IF NOT EXISTS User (
  UserID INT NOT NULL AUTO_INCREMENT,
  Email VARCHAR(255) NOT NULL,
  UserName VARCHAR(255) NOT NULL,
  Password VARCHAR(255) NOT NULL,
  PRIMARY KEY (UserID)
);
`
);

// SQL Table: Profile
sqlQuery(
  `
  CREATE TABLE IF NOT EXISTS Profile (
  ProfileID INT UNSIGNED NOT NULL AUTO_INCREMENT,
  FirstName VARCHAR(255) NOT NULL,
  LastName VARCHAR(255) NOT NULL,
  PRIMARY KEY (ProfileId),
  UserID INT UNSIGNED NOT NULL REFERENCES User(UserID)
);
`
);

// SQL Table: Post
sqlQuery(
  `
  CREATE TABLE IF NOT EXISTS Post (
    PostID INT UNSIGNED NOT NULL AUTO_INCREMENT,
    EntryDate DATE NOT NULL,
    Content MEDIUMBLOB NOT NULL,
    EntryImage MEDIUMBLOB,
    Published BOOLEAN NOT NULL DEFAULT 0,
    PRIMARY KEY (PostId),
    UserID INT UNSIGNED NOT NULL REFERENCES User(UserID)
);
`
);

// SQL Dummy data
const dummyEntries = 10;
_.times(dummyEntries, () => {
  sqlQuery(
    `INSERT INTO User (Email, UserName, Password) 
        VALUES ("${casual.email}", "${casual.username}", "${casual.password}");`
  );
  sqlQuery(
    `INSERT INTO Profile (FirstName, LastName, UserID) 
        VALUES ("${casual.first_name}", "${
      casual.last_name
    }", "${casual.integer((from = 1), (to = 10))}");`
  );
});

_.times(dummyEntries * 100, () => {
  sqlQuery(
    `INSERT INTO Post (EntryDate, Content, EntryImage, Published, UserID)
      VALUES (
        "${casual.date((format = "YYYY-MM-DD"))}",
        "${casual.description}",
        "../public/images/WP-header-image-size-1024x536.jpg",
        "${casual.integer((from = 0), (to = 1))}",
        "${casual.integer((from = 1), (to = 10))}"
      );`
  );
});

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }
  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

//  Event listener for HTTP server "listening" event.
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
